//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Lnrpc_WalletUnlockerServiceClient, then call methods of this protocol to make API calls.
internal protocol Lnrpc_WalletUnlockerService {
  func genSeed(_ request: Lnrpc_GenSeedRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_GenSeedRequest, Lnrpc_GenSeedResponse>
  func initWallet(_ request: Lnrpc_InitWalletRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_InitWalletRequest, Lnrpc_InitWalletResponse>
  func unlockWallet(_ request: Lnrpc_UnlockWalletRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_UnlockWalletRequest, Lnrpc_UnlockWalletResponse>
  func changePassword(_ request: Lnrpc_ChangePasswordRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChangePasswordRequest, Lnrpc_ChangePasswordResponse>
}

internal final class Lnrpc_WalletUnlockerServiceClient: GRPCClient, Lnrpc_WalletUnlockerService {
  internal let connection: ClientConnection
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the lnrpc.WalletUnlocker service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to GenSeed.
  ///
  /// - Parameters:
  ///   - request: Request to send to GenSeed.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func genSeed(_ request: Lnrpc_GenSeedRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_GenSeedRequest, Lnrpc_GenSeedResponse> {
    return self.makeUnaryCall(path: "/lnrpc.WalletUnlocker/GenSeed",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to InitWallet.
  ///
  /// - Parameters:
  ///   - request: Request to send to InitWallet.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func initWallet(_ request: Lnrpc_InitWalletRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_InitWalletRequest, Lnrpc_InitWalletResponse> {
    return self.makeUnaryCall(path: "/lnrpc.WalletUnlocker/InitWallet",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to UnlockWallet.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlockWallet.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlockWallet(_ request: Lnrpc_UnlockWalletRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_UnlockWalletRequest, Lnrpc_UnlockWalletResponse> {
    return self.makeUnaryCall(path: "/lnrpc.WalletUnlocker/UnlockWallet",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ChangePassword.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangePassword.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func changePassword(_ request: Lnrpc_ChangePasswordRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChangePasswordRequest, Lnrpc_ChangePasswordResponse> {
    return self.makeUnaryCall(path: "/lnrpc.WalletUnlocker/ChangePassword",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate Lnrpc_LightningServiceClient, then call methods of this protocol to make API calls.
internal protocol Lnrpc_LightningService {
  func walletBalance(_ request: Lnrpc_WalletBalanceRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_WalletBalanceRequest, Lnrpc_WalletBalanceResponse>
  func channelBalance(_ request: Lnrpc_ChannelBalanceRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChannelBalanceRequest, Lnrpc_ChannelBalanceResponse>
  func getTransactions(_ request: Lnrpc_GetTransactionsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_GetTransactionsRequest, Lnrpc_TransactionDetails>
  func estimateFee(_ request: Lnrpc_EstimateFeeRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_EstimateFeeRequest, Lnrpc_EstimateFeeResponse>
  func sendCoins(_ request: Lnrpc_SendCoinsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_SendCoinsRequest, Lnrpc_SendCoinsResponse>
  func listUnspent(_ request: Lnrpc_ListUnspentRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ListUnspentRequest, Lnrpc_ListUnspentResponse>
  func subscribeTransactions(_ request: Lnrpc_GetTransactionsRequest, callOptions: CallOptions?, handler: @escaping (Lnrpc_Transaction) -> Void) -> ServerStreamingCall<Lnrpc_GetTransactionsRequest, Lnrpc_Transaction>
  func sendMany(_ request: Lnrpc_SendManyRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_SendManyRequest, Lnrpc_SendManyResponse>
  func newAddress(_ request: Lnrpc_NewAddressRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_NewAddressRequest, Lnrpc_NewAddressResponse>
  func signMessage(_ request: Lnrpc_SignMessageRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_SignMessageRequest, Lnrpc_SignMessageResponse>
  func verifyMessage(_ request: Lnrpc_VerifyMessageRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_VerifyMessageRequest, Lnrpc_VerifyMessageResponse>
  func connectPeer(_ request: Lnrpc_ConnectPeerRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ConnectPeerRequest, Lnrpc_ConnectPeerResponse>
  func disconnectPeer(_ request: Lnrpc_DisconnectPeerRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_DisconnectPeerRequest, Lnrpc_DisconnectPeerResponse>
  func listPeers(_ request: Lnrpc_ListPeersRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ListPeersRequest, Lnrpc_ListPeersResponse>
  func subscribePeerEvents(_ request: Lnrpc_PeerEventSubscription, callOptions: CallOptions?, handler: @escaping (Lnrpc_PeerEvent) -> Void) -> ServerStreamingCall<Lnrpc_PeerEventSubscription, Lnrpc_PeerEvent>
  func getInfo(_ request: Lnrpc_GetInfoRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_GetInfoRequest, Lnrpc_GetInfoResponse>
  func pendingChannels(_ request: Lnrpc_PendingChannelsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_PendingChannelsRequest, Lnrpc_PendingChannelsResponse>
  func listChannels(_ request: Lnrpc_ListChannelsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ListChannelsRequest, Lnrpc_ListChannelsResponse>
  func subscribeChannelEvents(_ request: Lnrpc_ChannelEventSubscription, callOptions: CallOptions?, handler: @escaping (Lnrpc_ChannelEventUpdate) -> Void) -> ServerStreamingCall<Lnrpc_ChannelEventSubscription, Lnrpc_ChannelEventUpdate>
  func closedChannels(_ request: Lnrpc_ClosedChannelsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ClosedChannelsRequest, Lnrpc_ClosedChannelsResponse>
  func openChannelSync(_ request: Lnrpc_OpenChannelRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_OpenChannelRequest, Lnrpc_ChannelPoint>
  func openChannel(_ request: Lnrpc_OpenChannelRequest, callOptions: CallOptions?, handler: @escaping (Lnrpc_OpenStatusUpdate) -> Void) -> ServerStreamingCall<Lnrpc_OpenChannelRequest, Lnrpc_OpenStatusUpdate>
  func fundingStateStep(_ request: Lnrpc_FundingTransitionMsg, callOptions: CallOptions?) -> UnaryCall<Lnrpc_FundingTransitionMsg, Lnrpc_FundingStateStepResp>
  func channelAcceptor(callOptions: CallOptions?, handler: @escaping (Lnrpc_ChannelAcceptRequest) -> Void) -> BidirectionalStreamingCall<Lnrpc_ChannelAcceptResponse, Lnrpc_ChannelAcceptRequest>
  func closeChannel(_ request: Lnrpc_CloseChannelRequest, callOptions: CallOptions?, handler: @escaping (Lnrpc_CloseStatusUpdate) -> Void) -> ServerStreamingCall<Lnrpc_CloseChannelRequest, Lnrpc_CloseStatusUpdate>
  func abandonChannel(_ request: Lnrpc_AbandonChannelRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_AbandonChannelRequest, Lnrpc_AbandonChannelResponse>
  func sendPayment(callOptions: CallOptions?, handler: @escaping (Lnrpc_SendResponse) -> Void) -> BidirectionalStreamingCall<Lnrpc_SendRequest, Lnrpc_SendResponse>
  func sendPaymentSync(_ request: Lnrpc_SendRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_SendRequest, Lnrpc_SendResponse>
  func sendToRoute(callOptions: CallOptions?, handler: @escaping (Lnrpc_SendResponse) -> Void) -> BidirectionalStreamingCall<Lnrpc_SendToRouteRequest, Lnrpc_SendResponse>
  func sendToRouteSync(_ request: Lnrpc_SendToRouteRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_SendToRouteRequest, Lnrpc_SendResponse>
  func addInvoice(_ request: Lnrpc_Invoice, callOptions: CallOptions?) -> UnaryCall<Lnrpc_Invoice, Lnrpc_AddInvoiceResponse>
  func listInvoices(_ request: Lnrpc_ListInvoiceRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ListInvoiceRequest, Lnrpc_ListInvoiceResponse>
  func lookupInvoice(_ request: Lnrpc_PaymentHash, callOptions: CallOptions?) -> UnaryCall<Lnrpc_PaymentHash, Lnrpc_Invoice>
  func subscribeInvoices(_ request: Lnrpc_InvoiceSubscription, callOptions: CallOptions?, handler: @escaping (Lnrpc_Invoice) -> Void) -> ServerStreamingCall<Lnrpc_InvoiceSubscription, Lnrpc_Invoice>
  func decodePayReq(_ request: Lnrpc_PayReqString, callOptions: CallOptions?) -> UnaryCall<Lnrpc_PayReqString, Lnrpc_PayReq>
  func listPayments(_ request: Lnrpc_ListPaymentsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ListPaymentsRequest, Lnrpc_ListPaymentsResponse>
  func deleteAllPayments(_ request: Lnrpc_DeleteAllPaymentsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_DeleteAllPaymentsRequest, Lnrpc_DeleteAllPaymentsResponse>
  func describeGraph(_ request: Lnrpc_ChannelGraphRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChannelGraphRequest, Lnrpc_ChannelGraph>
  func getChanInfo(_ request: Lnrpc_ChanInfoRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChanInfoRequest, Lnrpc_ChannelEdge>
  func getNodeInfo(_ request: Lnrpc_NodeInfoRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_NodeInfoRequest, Lnrpc_NodeInfo>
  func queryRoutes(_ request: Lnrpc_QueryRoutesRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_QueryRoutesRequest, Lnrpc_QueryRoutesResponse>
  func getNetworkInfo(_ request: Lnrpc_NetworkInfoRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_NetworkInfoRequest, Lnrpc_NetworkInfo>
  func stopDaemon(_ request: Lnrpc_StopRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_StopRequest, Lnrpc_StopResponse>
  func subscribeChannelGraph(_ request: Lnrpc_GraphTopologySubscription, callOptions: CallOptions?, handler: @escaping (Lnrpc_GraphTopologyUpdate) -> Void) -> ServerStreamingCall<Lnrpc_GraphTopologySubscription, Lnrpc_GraphTopologyUpdate>
  func debugLevel(_ request: Lnrpc_DebugLevelRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_DebugLevelRequest, Lnrpc_DebugLevelResponse>
  func feeReport(_ request: Lnrpc_FeeReportRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_FeeReportRequest, Lnrpc_FeeReportResponse>
  func updateChannelPolicy(_ request: Lnrpc_PolicyUpdateRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_PolicyUpdateRequest, Lnrpc_PolicyUpdateResponse>
  func forwardingHistory(_ request: Lnrpc_ForwardingHistoryRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ForwardingHistoryRequest, Lnrpc_ForwardingHistoryResponse>
  func exportChannelBackup(_ request: Lnrpc_ExportChannelBackupRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ExportChannelBackupRequest, Lnrpc_ChannelBackup>
  func exportAllChannelBackups(_ request: Lnrpc_ChanBackupExportRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChanBackupExportRequest, Lnrpc_ChanBackupSnapshot>
  func verifyChanBackup(_ request: Lnrpc_ChanBackupSnapshot, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChanBackupSnapshot, Lnrpc_VerifyChanBackupResponse>
  func restoreChannelBackups(_ request: Lnrpc_RestoreChanBackupRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_RestoreChanBackupRequest, Lnrpc_RestoreBackupResponse>
  func subscribeChannelBackups(_ request: Lnrpc_ChannelBackupSubscription, callOptions: CallOptions?, handler: @escaping (Lnrpc_ChanBackupSnapshot) -> Void) -> ServerStreamingCall<Lnrpc_ChannelBackupSubscription, Lnrpc_ChanBackupSnapshot>
  func bakeMacaroon(_ request: Lnrpc_BakeMacaroonRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_BakeMacaroonRequest, Lnrpc_BakeMacaroonResponse>
}

internal final class Lnrpc_LightningServiceClient: GRPCClient, Lnrpc_LightningService {
  internal let connection: ClientConnection
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the lnrpc.Lightning service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to WalletBalance.
  ///
  /// - Parameters:
  ///   - request: Request to send to WalletBalance.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func walletBalance(_ request: Lnrpc_WalletBalanceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_WalletBalanceRequest, Lnrpc_WalletBalanceResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/WalletBalance",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ChannelBalance.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChannelBalance.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func channelBalance(_ request: Lnrpc_ChannelBalanceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChannelBalanceRequest, Lnrpc_ChannelBalanceResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ChannelBalance",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetTransactions.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactions.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactions(_ request: Lnrpc_GetTransactionsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_GetTransactionsRequest, Lnrpc_TransactionDetails> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/GetTransactions",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to EstimateFee.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateFee.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateFee(_ request: Lnrpc_EstimateFeeRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_EstimateFeeRequest, Lnrpc_EstimateFeeResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/EstimateFee",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to SendCoins.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendCoins.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendCoins(_ request: Lnrpc_SendCoinsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_SendCoinsRequest, Lnrpc_SendCoinsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/SendCoins",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListUnspent.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListUnspent.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listUnspent(_ request: Lnrpc_ListUnspentRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ListUnspentRequest, Lnrpc_ListUnspentResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ListUnspent",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribeTransactions.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeTransactions.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeTransactions(_ request: Lnrpc_GetTransactionsRequest, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_Transaction) -> Void) -> ServerStreamingCall<Lnrpc_GetTransactionsRequest, Lnrpc_Transaction> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribeTransactions",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to SendMany.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMany.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendMany(_ request: Lnrpc_SendManyRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_SendManyRequest, Lnrpc_SendManyResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/SendMany",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to NewAddress.
  ///
  /// - Parameters:
  ///   - request: Request to send to NewAddress.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newAddress(_ request: Lnrpc_NewAddressRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_NewAddressRequest, Lnrpc_NewAddressResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/NewAddress",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to SignMessage.
  ///
  /// - Parameters:
  ///   - request: Request to send to SignMessage.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signMessage(_ request: Lnrpc_SignMessageRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_SignMessageRequest, Lnrpc_SignMessageResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/SignMessage",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to VerifyMessage.
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyMessage.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func verifyMessage(_ request: Lnrpc_VerifyMessageRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_VerifyMessageRequest, Lnrpc_VerifyMessageResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/VerifyMessage",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ConnectPeer.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectPeer.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func connectPeer(_ request: Lnrpc_ConnectPeerRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ConnectPeerRequest, Lnrpc_ConnectPeerResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ConnectPeer",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DisconnectPeer.
  ///
  /// - Parameters:
  ///   - request: Request to send to DisconnectPeer.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disconnectPeer(_ request: Lnrpc_DisconnectPeerRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_DisconnectPeerRequest, Lnrpc_DisconnectPeerResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/DisconnectPeer",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListPeers.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPeers.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listPeers(_ request: Lnrpc_ListPeersRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ListPeersRequest, Lnrpc_ListPeersResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ListPeers",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribePeerEvents.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribePeerEvents.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribePeerEvents(_ request: Lnrpc_PeerEventSubscription, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_PeerEvent) -> Void) -> ServerStreamingCall<Lnrpc_PeerEventSubscription, Lnrpc_PeerEvent> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribePeerEvents",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to GetInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getInfo(_ request: Lnrpc_GetInfoRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_GetInfoRequest, Lnrpc_GetInfoResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/GetInfo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PendingChannels.
  ///
  /// - Parameters:
  ///   - request: Request to send to PendingChannels.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pendingChannels(_ request: Lnrpc_PendingChannelsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_PendingChannelsRequest, Lnrpc_PendingChannelsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/PendingChannels",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListChannels.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListChannels.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listChannels(_ request: Lnrpc_ListChannelsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ListChannelsRequest, Lnrpc_ListChannelsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ListChannels",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribeChannelEvents.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeChannelEvents.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeChannelEvents(_ request: Lnrpc_ChannelEventSubscription, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_ChannelEventUpdate) -> Void) -> ServerStreamingCall<Lnrpc_ChannelEventSubscription, Lnrpc_ChannelEventUpdate> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribeChannelEvents",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to ClosedChannels.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClosedChannels.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closedChannels(_ request: Lnrpc_ClosedChannelsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ClosedChannelsRequest, Lnrpc_ClosedChannelsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ClosedChannels",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to OpenChannelSync.
  ///
  /// - Parameters:
  ///   - request: Request to send to OpenChannelSync.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func openChannelSync(_ request: Lnrpc_OpenChannelRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_OpenChannelRequest, Lnrpc_ChannelPoint> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/OpenChannelSync",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to OpenChannel.
  ///
  /// - Parameters:
  ///   - request: Request to send to OpenChannel.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func openChannel(_ request: Lnrpc_OpenChannelRequest, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_OpenStatusUpdate) -> Void) -> ServerStreamingCall<Lnrpc_OpenChannelRequest, Lnrpc_OpenStatusUpdate> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/OpenChannel",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to FundingStateStep.
  ///
  /// - Parameters:
  ///   - request: Request to send to FundingStateStep.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fundingStateStep(_ request: Lnrpc_FundingTransitionMsg, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_FundingTransitionMsg, Lnrpc_FundingStateStepResp> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/FundingStateStep",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous bidirectional-streaming call to ChannelAcceptor.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func channelAcceptor(callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_ChannelAcceptRequest) -> Void) -> BidirectionalStreamingCall<Lnrpc_ChannelAcceptResponse, Lnrpc_ChannelAcceptRequest> {
    return self.makeBidirectionalStreamingCall(path: "/lnrpc.Lightning/ChannelAcceptor",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Asynchronous server-streaming call to CloseChannel.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseChannel.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func closeChannel(_ request: Lnrpc_CloseChannelRequest, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_CloseStatusUpdate) -> Void) -> ServerStreamingCall<Lnrpc_CloseChannelRequest, Lnrpc_CloseStatusUpdate> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/CloseChannel",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to AbandonChannel.
  ///
  /// - Parameters:
  ///   - request: Request to send to AbandonChannel.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func abandonChannel(_ request: Lnrpc_AbandonChannelRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_AbandonChannelRequest, Lnrpc_AbandonChannelResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/AbandonChannel",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous bidirectional-streaming call to SendPayment.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func sendPayment(callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_SendResponse) -> Void) -> BidirectionalStreamingCall<Lnrpc_SendRequest, Lnrpc_SendResponse> {
    return self.makeBidirectionalStreamingCall(path: "/lnrpc.Lightning/SendPayment",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Asynchronous unary call to SendPaymentSync.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendPaymentSync.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendPaymentSync(_ request: Lnrpc_SendRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_SendRequest, Lnrpc_SendResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/SendPaymentSync",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous bidirectional-streaming call to SendToRoute.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func sendToRoute(callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_SendResponse) -> Void) -> BidirectionalStreamingCall<Lnrpc_SendToRouteRequest, Lnrpc_SendResponse> {
    return self.makeBidirectionalStreamingCall(path: "/lnrpc.Lightning/SendToRoute",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Asynchronous unary call to SendToRouteSync.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendToRouteSync.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendToRouteSync(_ request: Lnrpc_SendToRouteRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_SendToRouteRequest, Lnrpc_SendResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/SendToRouteSync",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to AddInvoice.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddInvoice.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addInvoice(_ request: Lnrpc_Invoice, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_Invoice, Lnrpc_AddInvoiceResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/AddInvoice",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListInvoices.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListInvoices.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listInvoices(_ request: Lnrpc_ListInvoiceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ListInvoiceRequest, Lnrpc_ListInvoiceResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ListInvoices",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to LookupInvoice.
  ///
  /// - Parameters:
  ///   - request: Request to send to LookupInvoice.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lookupInvoice(_ request: Lnrpc_PaymentHash, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_PaymentHash, Lnrpc_Invoice> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/LookupInvoice",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribeInvoices.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeInvoices.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeInvoices(_ request: Lnrpc_InvoiceSubscription, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_Invoice) -> Void) -> ServerStreamingCall<Lnrpc_InvoiceSubscription, Lnrpc_Invoice> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribeInvoices",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to DecodePayReq.
  ///
  /// - Parameters:
  ///   - request: Request to send to DecodePayReq.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func decodePayReq(_ request: Lnrpc_PayReqString, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_PayReqString, Lnrpc_PayReq> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/DecodePayReq",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListPayments.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPayments.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listPayments(_ request: Lnrpc_ListPaymentsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ListPaymentsRequest, Lnrpc_ListPaymentsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ListPayments",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DeleteAllPayments.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAllPayments.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteAllPayments(_ request: Lnrpc_DeleteAllPaymentsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_DeleteAllPaymentsRequest, Lnrpc_DeleteAllPaymentsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/DeleteAllPayments",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DescribeGraph.
  ///
  /// - Parameters:
  ///   - request: Request to send to DescribeGraph.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func describeGraph(_ request: Lnrpc_ChannelGraphRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChannelGraphRequest, Lnrpc_ChannelGraph> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/DescribeGraph",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetChanInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChanInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getChanInfo(_ request: Lnrpc_ChanInfoRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChanInfoRequest, Lnrpc_ChannelEdge> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/GetChanInfo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetNodeInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNodeInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNodeInfo(_ request: Lnrpc_NodeInfoRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_NodeInfoRequest, Lnrpc_NodeInfo> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/GetNodeInfo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to QueryRoutes.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryRoutes.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryRoutes(_ request: Lnrpc_QueryRoutesRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_QueryRoutesRequest, Lnrpc_QueryRoutesResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/QueryRoutes",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetNetworkInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNetworkInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNetworkInfo(_ request: Lnrpc_NetworkInfoRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_NetworkInfoRequest, Lnrpc_NetworkInfo> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/GetNetworkInfo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to StopDaemon.
  ///
  /// - Parameters:
  ///   - request: Request to send to StopDaemon.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stopDaemon(_ request: Lnrpc_StopRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_StopRequest, Lnrpc_StopResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/StopDaemon",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribeChannelGraph.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeChannelGraph.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeChannelGraph(_ request: Lnrpc_GraphTopologySubscription, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_GraphTopologyUpdate) -> Void) -> ServerStreamingCall<Lnrpc_GraphTopologySubscription, Lnrpc_GraphTopologyUpdate> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribeChannelGraph",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to DebugLevel.
  ///
  /// - Parameters:
  ///   - request: Request to send to DebugLevel.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func debugLevel(_ request: Lnrpc_DebugLevelRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_DebugLevelRequest, Lnrpc_DebugLevelResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/DebugLevel",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to FeeReport.
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeReport.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeReport(_ request: Lnrpc_FeeReportRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_FeeReportRequest, Lnrpc_FeeReportResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/FeeReport",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to UpdateChannelPolicy.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateChannelPolicy.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateChannelPolicy(_ request: Lnrpc_PolicyUpdateRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_PolicyUpdateRequest, Lnrpc_PolicyUpdateResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/UpdateChannelPolicy",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ForwardingHistory.
  ///
  /// - Parameters:
  ///   - request: Request to send to ForwardingHistory.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func forwardingHistory(_ request: Lnrpc_ForwardingHistoryRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ForwardingHistoryRequest, Lnrpc_ForwardingHistoryResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ForwardingHistory",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ExportChannelBackup.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExportChannelBackup.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exportChannelBackup(_ request: Lnrpc_ExportChannelBackupRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ExportChannelBackupRequest, Lnrpc_ChannelBackup> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ExportChannelBackup",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ExportAllChannelBackups.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExportAllChannelBackups.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exportAllChannelBackups(_ request: Lnrpc_ChanBackupExportRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChanBackupExportRequest, Lnrpc_ChanBackupSnapshot> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ExportAllChannelBackups",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to VerifyChanBackup.
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyChanBackup.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func verifyChanBackup(_ request: Lnrpc_ChanBackupSnapshot, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChanBackupSnapshot, Lnrpc_VerifyChanBackupResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/VerifyChanBackup",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to RestoreChannelBackups.
  ///
  /// - Parameters:
  ///   - request: Request to send to RestoreChannelBackups.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func restoreChannelBackups(_ request: Lnrpc_RestoreChanBackupRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_RestoreChanBackupRequest, Lnrpc_RestoreBackupResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/RestoreChannelBackups",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribeChannelBackups.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeChannelBackups.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeChannelBackups(_ request: Lnrpc_ChannelBackupSubscription, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_ChanBackupSnapshot) -> Void) -> ServerStreamingCall<Lnrpc_ChannelBackupSubscription, Lnrpc_ChanBackupSnapshot> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribeChannelBackups",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to BakeMacaroon.
  ///
  /// - Parameters:
  ///   - request: Request to send to BakeMacaroon.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bakeMacaroon(_ request: Lnrpc_BakeMacaroonRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_BakeMacaroonRequest, Lnrpc_BakeMacaroonResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/BakeMacaroon",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

